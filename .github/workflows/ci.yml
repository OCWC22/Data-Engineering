name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./neuralake
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: neuralake/.venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('neuralake/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
    
    - name: Install dependencies
      run: poetry install
    
    - name: Run ruff linting
      run: poetry run ruff check . --output-format=github
    
    - name: Run ruff formatting check
      run: poetry run ruff format --check .
    
    - name: Check import sorting
      run: poetry run ruff check . --select I --diff

  test-production-verification:
    name: Production Verification Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    defaults:
      run:
        working-directory: ./neuralake
    
    services:
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: neuralake/.venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('neuralake/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
    
    - name: Install dependencies
      run: poetry install
    
    - name: Wait for MinIO to be ready
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:9000/minio/health/live; do sleep 2; done'
        echo "✅ MinIO is ready"
    
    - name: Set up MinIO bucket using Python
      run: |
        python3 -c "
        from minio import Minio
        client = Minio('localhost:9000', access_key='minioadmin', secret_key='minioadmin', secure=False)
        if not client.bucket_exists('neuralake-bucket'):
            client.make_bucket('neuralake-bucket')
            print('✅ MinIO bucket created')
        else:
            print('✅ MinIO bucket already exists')
        "
    
    - name: Upload sample data to MinIO
      env:
        NEURALAKE_ENV: LOCAL
        AWS_ACCESS_KEY_ID: minioadmin
        AWS_SECRET_ACCESS_KEY: minioadmin
        AWS_ENDPOINT_URL: http://localhost:9000
      run: |
        # Create sample data first
        poetry run python scripts/create_sample_data.py
        # Upload to MinIO
        poetry run python scripts/upload_sample_data_to_minio.py
    
    - name: Run production verification suite
      env:
        NEURALAKE_ENV: LOCAL
        AWS_ACCESS_KEY_ID: minioadmin
        AWS_SECRET_ACCESS_KEY: minioadmin
        AWS_ENDPOINT_URL: http://localhost:9000
      run: |
        poetry run python scripts/production_verification.py
    
    - name: Run unit tests with coverage
      env:
        NEURALAKE_ENV: LOCAL
      run: |
        poetry run pytest -v --cov=src --cov-report=xml --cov-report=term-missing || echo "Tests will be implemented in Task 7"
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./neuralake/coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-local:
    name: Test Suite (Local Mode)
    runs-on: ubuntu-latest
    needs: lint-and-format
    defaults:
      run:
        working-directory: ./neuralake
    
    services:
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install
    
    - name: Wait for MinIO
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:9000/minio/health/live; do sleep 2; done'
    
    - name: Set up MinIO bucket
      run: |
        pip install minio
        python -c "
        from minio import Minio
        client = Minio('localhost:9000', access_key='minioadmin', secret_key='minioadmin', secure=False)
        if not client.bucket_exists('neuralake-bucket'):
            client.make_bucket('neuralake-bucket')
        print('✅ MinIO bucket created')
        "
    
    - name: Run production verification tests
      env:
        NEURALAKE_ENV: LOCAL
      run: poetry run python scripts/production_verification.py

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./neuralake
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1
    
    - name: Install dependencies
      run: poetry install
    
    - name: Run safety check for vulnerabilities
      run: |
        poetry add --group dev safety
        poetry run safety check
    
    - name: Run bandit security linting
      run: |
        poetry add --group dev bandit
        poetry run bandit -r src/ scripts/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: neuralake/bandit-report.json 