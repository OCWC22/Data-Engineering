# Task ID: 3
# Title: Implement CI/CD Pipeline
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Create a GitHub Actions workflow that triggers on push/pull-request to main, installs dependencies via Poetry, runs code quality tools, and executes the production verification test suite.
# Details:
1. Create `.github/workflows/ci.yml` file with comprehensive CI/CD pipeline
2. Configure workflow to trigger on push and pull requests to main branch
3. Set up Poetry installation and dependency caching for faster builds
4. Add step to run ruff linting and formatting checks
5. Execute `production_verification.py` test suite in both `local` and `production` modes
6. Add test result reporting and failure notifications
7. Configure environment variables for CI execution
8. Add badge to README showing build status

# Test Strategy:
1. Test workflow triggers on push and pull request events
2. Verify Poetry installation and dependency caching works correctly
3. Test that ruff checks fail the build when code quality issues exist
4. Verify production_verification.py runs successfully in both modes
5. Test that build fails appropriately when tests fail
6. Verify environment variable handling in CI environment
7. Test badge integration and status reporting

# Subtasks:
## 3.1. Create GitHub Actions workflow file [pending]
### Dependencies: None
### Description: Set up the .github/workflows/ci.yml file with Poetry and Python configuration
### Details:


## 3.2. Configure code quality checks in CI [pending]
### Dependencies: None
### Description: Add ruff linting and formatting verification steps to the workflow
### Details:


## 3.3. Integrate production verification tests [pending]
### Dependencies: None
### Description: Add steps to run the production_verification.py suite in both local and production modes
### Details:


## 3.4. Add build status badge to README [pending]
### Dependencies: None
### Description: Update README.md with GitHub Actions build status badge
### Details:


## 4.4. Create GitHub Actions workflow structure [pending]
### Dependencies: None
### Description: Set up the GitHub Actions directory structure and create the main CI workflow file with complete job definitions
### Details:
**Directory structure to create:**
```
.github/
├── workflows/
│   ├── ci.yml
│   └── release.yml (future)
└── dependabot.yml (future)
```

**Create `.github/workflows/ci.yml`:**
```yaml
name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./neuralake
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: neuralake/.venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('neuralake/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
    
    - name: Install dependencies
      run: poetry install
    
    - name: Run ruff linting
      run: poetry run ruff check . --output-format=github
    
    - name: Run ruff formatting check
      run: poetry run ruff format --check .
    
    - name: Check import sorting
      run: poetry run ruff check . --select I --diff

  test-local:
    name: Test Suite (Local Mode)
    runs-on: ubuntu-latest
    needs: lint-and-format
    defaults:
      run:
        working-directory: ./neuralake
    
    services:
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        command: server /data --console-address ":9001"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install
    
    - name: Wait for MinIO
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:9000/minio/health/live; do sleep 2; done'
    
    - name: Set up MinIO bucket
      run: |
        pip install minio
        python -c "
        from minio import Minio
        client = Minio('localhost:9000', access_key='minioadmin', secret_key='minioadmin', secure=False)
        if not client.bucket_exists('neuralake-bucket'):
            client.make_bucket('neuralake-bucket')
        print('✅ MinIO bucket created')
        "
    
    - name: Run production verification tests
      env:
        NEURALAKE_ENV: LOCAL
      run: poetry run python scripts/production_verification.py

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./neuralake
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1
    
    - name: Install dependencies
      run: poetry install
    
    - name: Run safety check for vulnerabilities
      run: |
        poetry add --group dev safety
        poetry run safety check
    
    - name: Run bandit security linting
      run: |
        poetry add --group dev bandit
        poetry run bandit -r src/ scripts/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: neuralake/bandit-report.json
```

**Commands to test locally:**
```bash
# Create directory structure
mkdir -p .github/workflows/

# Validate YAML syntax
python -c "import yaml; yaml.safe_load(open('.github/workflows/ci.yml'))"

# Test workflow locally (if act is installed)
act -j lint-and-format
```

